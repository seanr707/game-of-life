/* For use with NodeJS
import React from 'react';
import { render } from 'react-dom';
import { List, Map } from 'immutable';
import { createStore } from 'redux';
import { Provider, connect } from 'react-redux';
*/

// Use in brower/codepen
const { PropTypes } = React;
const { render } = ReactDOM;
const { List, Map } = Immutable;
const { createStore } = Redux;
const { Provider, connect } = ReactRedux;

// Utility functions
// Generates a grid. Users input height, width, whether cells should be filled in randomly
const gridGen = (width, height, random = false, skyline = false) => {
  let temp = [];
  let isPopulated = false;

  for (let y = 0; y < height; y++) {
    let row = [];

    for (let x = 0; x < width; x++) {
      if (random) {
        isPopulated = Math.random() * 10 > 5;
      }

      let color;
      
      // Option to make the background look like a pixel, urban landscape (NOT USED CURRENTLY)
      if (skyline) {
        color = skylineColor(x, y, width, height);
      } else {
        color = [
          'red',
          'blue',
          'green',
          'yellow',
          'white'
        ][(x + y) % 5];
      }

      row = row.concat({
        x: x,
        y: y,
        populated: isPopulated,
        color: color
      });
    }
    temp = temp.concat([row]);
  }

  return temp;
};

// Currently unused function to determine the color of cell to make the grid appear like a skyline
const skylineColor = (x, y, width, height) => {
  let cloudCenter;
  let buildingCenter;

  const buildingSpread = 8;
  const cloudSpread = 10;

  const cloudRadius = 3;
  const buildingWidth = 2;
  // let triangleWidth = 0;

  const wallTop = (height * (2 / 3)) - height * 0.20;
  // let currentI = Math.ceil(wallTop - 3);

  if ((x + buildingWidth) % buildingSpread === 0) {
    buildingCenter = x + buildingWidth;
  }

  if ((x + cloudRadius) % cloudSpread === 0) {
    cloudCenter = x + cloudRadius;
  }

  // Painting for all above ground
  if (y <= height * (2 / 3)) {
    if (buildingCenter - buildingWidth <= x && x <= buildingCenter + buildingWidth && y >= wallTop) {
      // Paint walls
      if ((x % 2 && y % 2) === 0) return 'red';
      // Paint windows
      if ((x % 2 && y % 2) !== 0) return 'yellow';
    }
    // Paint clouds
    if (y >= 2 && y <= (height * 0.10) && x >= cloudCenter - cloudRadius && x <= cloudCenter + cloudRadius) {
      return 'white';
    }
    // Paint sky
    return 'blue';
  } else if (y > height * (2 / 3)) {
    // Paint grass
    return 'green';
  }
};

// Find the mininum and maximum areas to check the surrounding cells
const getMinMax = (value, limit) => {
  return {
    min: Math.abs((limit + value - 1) % limit),
    max: Math.abs((limit + value + 1) % limit)
  };
};

// Checks the surrounding cells of a specified cell to see how many are populated (Returns array)
const checkSurroundingCells = (grid, x, y) => {
  try {
    const limitX = getMinMax(x, grid[0].length);
    const limitY = getMinMax(y, grid.length);
    // Gets all 8 surrounding blocks and returns only the populated ones
    return [
      grid[limitY.min][limitX.min],
      grid[limitY.min][x],
      grid[limitY.min][limitX.max],
      grid[y][limitX.min],
      grid[y][limitX.max],
      grid[limitY.max][limitX.min],
      grid[limitY.max][x],
      grid[limitY.max][limitX.max]
    ].filter(cell => {
      return cell.populated;
    });
  } catch (e) {
    return [];
  }
};

// Loops through grid to determine how the next generation should be updated
const checkGrid = (grid) => {
  let tempGrid = [];

  // Using for loops instead of .map because of need to call setTimeout
  for (let y = 0; y < grid.length; y++) {
    let row = [];
    for (let x = 0; x < grid[0].length; x++) {
      const cell = Object.assign({}, grid[y][x]);
      const neighbors = checkSurroundingCells(grid, x, y).length;

      // Change cell state based on rules of game
      if (cell.populated && (neighbors < 2 || neighbors > 3)) {
        cell.populated = !cell.populated;
      } else if (!cell.populated && neighbors === 3) {
        cell.populated = !cell.populated;
      }

      row = row.concat(cell);
    }
    tempGrid = tempGrid.concat([row]);
  }

  return tempGrid;
};

// Checks the screen size to adjust the grid size on phones
const checkScreenSize = (sizes) => {
  if (window.screen.availWidth <= 700) {
    return sizes.map((obj) => {
      return {
        width: Math.floor(obj.height / 2),
        height: Math.floor(obj.width / 2)
      };
    });
  } else {
    return sizes;
  }
};

// Object for storing types of actions used below
const actions = {
  START_GAME: 'START_GAME',
  STOP_GAME: 'STOP_GAME',
  TOGGLE_CELL: 'TOGGLE_CELL',
  INCREASE_GENERATION: 'INCREASE_GENERATION',
  CLEAR_GENERATION: 'CLEAR_GENERATION',
  UPDATE_GRID: 'UPDATE_GRID',
  CHANGE_SPEED: 'CHANGE_SPEED',
  TOGGLE_RANDOM: 'TOGGLE_RANDOM',
  TOGGLE_OPTIONS: 'TOGGLE_OPTIONS',
  TOGGLE_FIRST_LOAD: 'TOGGLE_FIRST_LOAD'
};

// Actions
function startGame(id) {
  return {
    type: actions.START_GAME,
    id
  };
}

function stopGame(id) {
  return {
    type: actions.STOP_GAME,
    id
  };
}

function toggleCell(x, y) {
  return {
    type: actions.TOGGLE_CELL,
    x,
    y
  };
}

function increaseGeneration() {
  return {
    type: actions.INCREASE_GENERATION
  };
}

function clearGeneration() {
  return {
    type: actions.CLEAR_GENERATION
  };
}

function updateGrid(grid) {
  return {
    type: actions.UPDATE_GRID,
    grid
  };
}

function changeSpeed(speed) {
  return {
    type: actions.CHANGE_SPEED,
    speed
  };
}

// Toggle random bool
function toggleRandom() {
  return {
    type: actions.TOGGLE_RANDOM
  };
}

// Toggle view of the options
function toggleOptions() {
  return {
    type: actions.TOGGLE_OPTIONS
  };
}

// Determines if this is the first run through of the script
function toggleFirstLoad() {
  return {
    type: actions.TOGGLE_FIRST_LOAD
  };
}

const sizes = checkScreenSize([
  { height: 30, width: 50 },
  { height: 50, width: 70 },
  { height: 70, width: 100 }
]);

// Reducers
const initialState = Map({
  grid: gridGen(sizes[1].width, sizes[1].height, true),
  running: true,
  speed: 100,
  sizes: sizes,
  isRandom: true,
  optionsVisible: false,
  generation: 0,
  firstLoad: true
});

// Reducer
function gameOfLifeApp(state = initialState, action) {
  switch (action.type) {

  case actions.START_GAME:
    return state.set('running', action.id);

  case actions.STOP_GAME:
    return state.set('running', false);

  case actions.TOGGLE_CELL:
    const temp = Object.assign([], state.get('grid'));
    temp[action.y][action.x].populated = !temp[action.y][action.x].populated;
    return state.set('grid', temp);

  case actions.INCREASE_GENERATION:
    return state.set('generation', (state.get('generation') + 1));

  case actions.CLEAR_GENERATION:
    return state.set('generation', 0);

  case actions.UPDATE_GRID:
    if (action.grid) {
      return state.set('grid', action.grid);
    } else {
      return state.set('grid', checkGrid(state.get('grid')));
    }

  case actions.CHANGE_SPEED:
    return state.set('speed', action.speed);

  case actions.TOGGLE_RANDOM:
    return state.set('isRandom', !state.get('isRandom'));

  case actions.TOGGLE_OPTIONS:
    return state.set('optionsVisible', !state.get('optionsVisible'));

  case actions.TOGGLE_FIRST_LOAD:
    return state.set('firstLoad', false);

  default:
    return state;
  }
}

// Create Store/Reducer
let store = createStore(gameOfLifeApp);

// Components
// Main grid
let Grid = ({ grid, toggleCell }) => {
  const HEIGHT = 400;
  const WIDTH = 600;
  let tableMargin = 10;
  let tableWidth = WIDTH;
  let tableHeight = HEIGHT;

  // Makes the grid smaller for small screens and changes to portrait view
  if (window.screen.availWidth <= 700) {
    tableWidth = HEIGHT / 2;
    tableHeight = WIDTH / 2;
  }

  const borderStyle = {
    margin: tableMargin + 'px auto',
    width: tableWidth + (tableMargin * 4 * 2) + 'px',
    height: tableHeight + (tableMargin * 4 * 2) + 'px'
  };

  const bezelStyle = {
    margin: tableMargin * 3 + 'px auto',
    width: tableWidth + (tableMargin * 2) + 'px',
    height: tableHeight + (tableMargin * 2) + 'px'
  };

  const tableStyle = {
    margin: tableMargin + 'px auto',
    width: tableWidth + 'px',
    height: tableHeight + 'px'
  };

  let cells = [];

  for (let y = 0; y < grid.length; y++) {
    let row = [];
    for (let x = 0; x < grid[y].length; x++) {
      const cell = Object.assign({}, grid[y][x]);
      row = row.concat(
        <td
          id={cell.x + '' + cell.y}
          className={cell.populated ? 'cell populated ' + cell.color : 'cell'}
          onClick={() => toggleCell(cell.x, cell.y)}
        />
      );
    }
    cells = cells.concat(
      <tr className="row">
        {row}
      </tr>
    );
  }

  return (
    <div style={borderStyle} className="table-screen-border">
      <GenerationCounter />
      <div style={bezelStyle} className="table-bezel">
        <table style={tableStyle} id="grid">
          <tbody>
           {cells}
          </tbody>
        </table>
      </div>
    </div>
  );
};

const mapStateToGrid = (state) => {
  return {
    grid: state.get('grid')
  };
};

const mapDispatchToGrid = (dispatch) => {
  return {
    toggleCell: (x, y) => {
      dispatch(toggleCell(x, y));
    }
  };
};

Grid = connect(
  mapStateToGrid,
  mapDispatchToGrid
)(Grid);

let GenerationCounter = ({ generation }) => {
  return (
    <div className="generation-counter">{generation}</div>
  );
};

const mapStateToGenerationCounter = (state) => {
  return {
    generation: state.get('generation')
  };
};

GenerationCounter = connect(mapStateToGenerationCounter)(GenerationCounter);

let StartButton = ({ running, speed, firstLoad, startGame, stopGame, updateGrid, increaseGeneration, toggleFirstLoad }) => {
  const text = running ? 'Stop' : 'Start';
  let click;

  if (firstLoad) {
    toggleFirstLoad();
    startGame(setInterval(() => {
      updateGrid();
      increaseGeneration();
    }, speed));
  }

  if (!running) {
    click = () => {
      startGame(setInterval(() => {
        updateGrid();
        increaseGeneration();
      }, speed));
    };
  } else {
    click = () => {
      clearInterval(running);
      stopGame();
    };
  }

  return (
    <button type="button" className={running ? 'btn btn-go' : 'btn'} onClick={click}>{text}</button>
  );
};

const mapStateToStartButton = (state) => {
  return {
    running: state.get('running'),
    speed: state.get('speed'),
    firstLoad: state.get('firstLoad')
  };
};

const mapDispatchToStartButton = (dispatch) => {
  return {
    startGame: (id) => {
      dispatch(startGame(id));
    },
    stopGame: () => {
      dispatch(stopGame());
    },
    updateGrid: () => {
      dispatch(updateGrid());
    },
    increaseGeneration: () => {
      dispatch(increaseGeneration());
    },
    toggleFirstLoad: () => {
      dispatch(toggleFirstLoad());
    }
  };
};

StartButton = connect(
  mapStateToStartButton,
  mapDispatchToStartButton
)(StartButton);

let ClearButton = ({ running, height, width, stopGame, clearGrid }) => {
  let click;

  if (!running) {
    click = () => {
      clearGrid(width, height);
    };
  } else {
    click = () => {
      clearInterval(running);
      stopGame();
      clearGrid(width, height);
    };
  }

  return (
    <button type="button" className="btn btn-clear" onClick={click}>Clear</button>
  );
};

const mapStateToClearButton = (state) => {
  return {
    running: state.get('running'),
    height: state.get('grid').length,
    width: state.get('grid')[0].length
  };
};

const mapDispatchToClearButton = (dispatch) => {
  return {
    stopGame: () => {
      dispatch(stopGame());
    },
    clearGrid: (width, height, random) => {
      dispatch(clearGeneration());
      dispatch(updateGrid(gridGen(width, height, random)));
    }
  };
};

ClearButton = connect(
  mapStateToClearButton,
  mapDispatchToClearButton
)(ClearButton);

let SizeButtons = ({ height, width, sizes, running, isRandom, setSize }) => {
  return (
    <div className="size-buttons">
      {sizes.map(size => {
        let isActive = '';
        if (width === size.width) {
          isActive = ' btn-active';
        }
        return <button
          className={'btn' + isActive}
          disabled={running}
          onClick={() => setSize(size.width, size.height, isRandom)}
        >
          {size.width} x {size.height}
        </button>;
      })}
    </div>
  );
};

const mapStateToSizeButtons = (state) => {
  return {
    height: state.get('grid').length,
    width: state.get('grid')[0].length,
    sizes: state.get('sizes'),
    running: state.get('running'),
    isRandom: state.get('isRandom')
  };
};

const mapDispatchToSizeButtons = (dispatch) => {
  return {
    setSize: (width, height, random) => {
      dispatch(clearGeneration());
      dispatch(updateGrid(gridGen(width, height, random)));
    }
  };
};

SizeButtons = connect(
  mapStateToSizeButtons,
  mapDispatchToSizeButtons
)(SizeButtons);

let SpeedButtons = ({ speed, running, setSpeed }) => {
  const speeds = [
    { Slow: 300 },
    { Medium: 200 },
    { Fast: 100 }
  ];

  return (
    <div className="speed-buttons">
      {speeds.map(speedObj => {
        const key = Object.keys(speedObj);
        const value = speedObj[key];
        let isActive = '';
        if (speed === value) {
          isActive = ' btn-active';
        }
        return (
          <button
            className={'btn' + isActive}
            disabled={running}
            onClick={() => setSpeed(value)}
          >
            {key}
          </button>
        );
      })}
    </div>
  );
};

const mapStateToSpeedButtons = (state) => {
  return {
    speed: state.get('speed'),
    running: state.get('running')
  };
};

const mapDispatchToSpeedButtons = (dispatch) => {
  return {
    setSpeed: (speed) => {
      dispatch(changeSpeed(speed));
    }
  };
};

SpeedButtons = connect(
  mapStateToSpeedButtons,
  mapDispatchToSpeedButtons
)(SpeedButtons);

let RandomButton = ({ running, isRandom, toggleRandom }) => {
  let isActive = 'check';
  let title = '';

  if (isRandom) {
    isActive += ' checked';
    title = 'X';
  }

  return (
    <div
      disabled={running}
      className="checkbox"
      onClick={toggleRandom}
    >
      <div className={isActive}>{title}</div>
    </div>
  );
};

const mapStateToRandomButton = (state) => {
  return {
    running: state.get('running'),
    isRandom: state.get('isRandom')
  };
};

const mapDispatchToRandomButton = (dispatch) => {
  return {
    toggleRandom: () => {
      dispatch(toggleRandom());
    }
  };
};

RandomButton = connect(
  mapStateToRandomButton,
  mapDispatchToRandomButton
)(RandomButton);

let Options = ({ expanded, toggleOptions }) => {
  let inlineStyle;
  let innerHtmlArrow = '▲';

  if (expanded) {
    inlineStyle = {
      bottom: '-165px'
    };
    innerHtmlArrow = '▼';
  }

  return (
    <div style={inlineStyle} className="all-buttons">
      <div onClick={toggleOptions} className="toggle-arrow">{innerHtmlArrow}</div>
      <div className="option-box">
        <div className="option-container">
          <div id="start-clear-btn-area" className="option-button-container">
            <StartButton />
            <ClearButton />
          </div>
          <div id="size-btn-area" className="option-button-container">
            <label>Size</label>
            <SizeButtons />
          </div>
          <div id="speed-btn-area" className="option-button-container">
            <label>Speed</label>
            <SpeedButtons />
          </div>
          <div id="random-btn-area" className="option-button-container">
            <label>Random</label>
            <RandomButton />
          </div>
        </div>
      </div>
    </div>
  );
};

const mapStateToOptions = (state) => {
  return {
    expanded: state.get('optionsVisible')
  };
};

const mapDispatchToOptions = (dispatch) => {
  return {
    toggleOptions: () => {
      dispatch(toggleOptions());
    }
  };
};

Options = connect(
  mapStateToOptions,
  mapDispatchToOptions
)(Options);

// Put together
const App = () => {
  return (
    <div id="root">
      <Grid />
      <Options />
    </div>
  );
};

// Render in Provider to create state everywhere
render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('app')
);
